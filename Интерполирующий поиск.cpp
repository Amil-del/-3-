#include <iostream>
#include <vector>
using namespace std;

// Интерполяционный поиск в отсортированном массиве
int interpolationSearch(const vector<int>& arr, int target) {
    int low = 0;                  // Начальное положение (нижняя граница)
    int high = arr.size() - 1;    // Конечное положение (верхняя граница)

    // Продолжаем поиск, пока границы не пересекутся
    while ((low <= high) && (target >= arr[low]) && (target <= arr[high])) {
        // Вычисляем промежуточную позицию (используя формулу интерполяции)
        int pos = low + (((double)(high - low) /
                         (arr[high] - arr[low])) *
                        (target - arr[low]));

        // Проверяем, нашел ли мы элемент
        if (arr[pos] == target) {
            return pos;           // Вернуть индекс найденного элемента
        }

        // Если целевой элемент меньше текущего, смещаемся влево
        if (arr[pos] < target) {
            low = pos + 1;        // Обновляем нижнюю границу
        }
        // Иначе сместимся вправо
        else {
            high = pos - 1;       // Обновляем верхнюю границу
        }
    }

    // Если цикл закончился без успешного результата, элемент не найден
    return -1;
}

// Основная функция для тестирования алгоритма
int main() {
    // Отсортированный массив для примера
    vector<int> arr = {10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 33, 35, 42, 47};

    // Целевой элемент для поиска
    int x = 18;

    // Выполняем поиск
    int index = interpolationSearch(arr, x);

    // Проверяем результат
    if (index != -1) {
        cout << "Элемент " << x << " найден на позиции " << index << "." << endl;
    } else {
        cout << "Элемент " << x << " не найден." << endl;
    }

    return 0;
}

//Пример вывода
//Индекс числа 18: 4
