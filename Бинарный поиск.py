def binary_search(arr, target):
    """
    Реализует алгоритм бинарного поиска в отсортированном списке.
    
    Параметры:
    arr (list): Отсортированный список элементов.
    target: Целевое значение для поиска.
    
    Возвращаемые значения:
    index (int): Индекс целевого элемента, если он найден,
                 иначе возвращает None.
    """
    
    # Определение границ поиска
    low = 0               # Нижняя граница диапазона поиска
    high = len(arr) - 1   # Верхняя граница диапазона поиска
    
    while low <= high:
        mid = (low + high) // 2     # Вычисляем средний индекс
        
        # Проверяем центральный элемент
        if arr[mid] == target:
            return mid              # Нашли нужный элемент, возвращаем его индекс
        
        elif arr[mid] < target:
            low = mid + 1           # Продолжаем поиск справа от середины
        
        else:
            high = mid - 1          # Продолжаем поиск слева от середины
    
    # Если цикл завершён без нахождения элемента, возвращаем None
    return None


# Демонстрационная функция для проверки работоспособности
if __name__ == "__main__":
    # Исходный отсортированный список
    sorted_data = [10, 20, 30, 40, 50, 60, 70, 80, 90]
    
    # Запрашиваемое значение
    search_target = 60
    
    # Выполнение бинарного поиска
    result = binary_search(sorted_data, search_target)
    
    # Вывод результатов
    if result is not None:
        print(f'Значение {search_target} найдено на индексе {result}.')
    else:
        print(f'Значение {search_target} не найдено в списке.')
#Значение 60 найдено на индексе 5.