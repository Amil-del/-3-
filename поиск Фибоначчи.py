def fibonacci_search(arr, target):
    # Создаем вспомогательную функцию для вычисления последовательности Фибоначчи
    def fib(n):
        a, b = 0, 1
        for _ in range(n):
            a, b = b, a+b
        return a
    
    # Длина исходного массива
    size = len(arr)
    
    # Определяем наименьшее число Фибоначчи, которое больше или равно длине массива
    i = 0
    while fib(i) < size:
        i += 1
    
    # Корректируем индекс на случай, если длина массива меньше нужного числа Фибоначчи
    offset = -1
    
    # Начинаем цикл поиска
    while fib(i) > 1:
        # Индекс сравнения рассчитывается относительно предыдущего числа Фибоначчи
        k = min(offset+fib(i-2), size-1)
        
        # Если целевой элемент находится слева от среднего
        if arr[k] < target:
            # Уменьшаем масштаб поиска, двигаясь в правую сторону
            i -= 1
            offset = k
            
        # Если целевой элемент находится справа от среднего
        elif arr[k] > target:
            # Уменьшаем масштаб поиска, двигаясь в левую сторону
            i -= 2
            
        # Если элемент найден
        else:
            return k
    
    # Последняя проверка на случай малого количества оставшихся элементов
    if fib(i-1) and arr[offset+1] == target:
        return offset+1
    
    # Если элемент не найден
    return -1


# Тестирование функции
if __name__ == "__main__":
    array = [10, 22, 35, 40, 45, 50, 80, 82]
    key = 45
    result = fibonacci_search(array, key)
    print(f'Элемент {key} найден по индексу {result}')

#Пример вывода
#Элемент 45 найден по индексу 4