#include <iostream>
#include <vector>
using namespace std;

// Функция сливающая два отсортированных массива в один отсортированный массив
void merge(vector<int>& arr, int left, int mid, int right) {
    // Создаем временные массивы для левого и правого частей исходного массива
    vector<int> L(mid - left + 1);     // Левый временный массив
    vector<int> R(right - mid);       // Правый временный массив

    // Копируем элементы левой части в первый временный массив
    for(int i = 0; i <= mid-left; ++i)
        L[i] = arr[left+i];
    
    // Копируем элементы правой части во второй временный массив
    for(int j = 0; j < right-mid; ++j)
        R[j] = arr[mid+1+j];          // Начинаем копирование с элемента сразу после середины

    // Индексы временных массивов
    int i = 0, j = 0;
    // Индекс основного массива
    int k = left;

    // Пока оба временных массива содержат элементы
    while(i < L.size() && j < R.size()) {
        if(L[i] <= R[j]) {            // Если элемент слева меньше или равен элементу справа
            arr[k++] = L[i++];        // Записываем элемент слева и увеличиваем индекс временного массива
        } else {
            arr[k++] = R[j++];        // Иначе записываем элемент справа и увеличиваем индекс временного массива
        }
    }

    // Если остались элементы в левом массиве, добавляем их в основной массив
    while(i < L.size())
        arr[k++] = L[i++];

    // Если остались элементы в правом массиве, добавляем их в основной массив
    while(j < R.size())
        arr[k++] = R[j++];
}

// Основная рекурсивная функция сортировки слиянием
void mergeSort(vector<int>& arr, int left, int right) {
    if(left >= right)                 // Базовый случай: массив длиной 1 или менее
        return;

    int mid = left + (right - left)/2;   // Вычисляем середину текущего диапазона

    // Рекурсивно сортируем левую половину
    mergeSort(arr, left, mid);

    // Рекурсивно сортируем правую половину
    mergeSort(arr, mid+1, right);

    // Объединяем две половины
    merge(arr, left, mid, right);
}

int main() {
    vector<int> array = {38, 27, 43, 3, 9, 82, 10}; // Пример несортированного массива

    cout << "Исходный массив:\n";
    for(auto num : array)
        cout << num << ' ';
    cout << '\n';

    // Сортируем массив методом Merge Sort
    mergeSort(array, 0, array.size()-1);

    cout << "\nОтсортированный массив:\n";
    for(auto num : array)
        cout << num << ' ';
    cout << endl;

    return 0;
}
//Пример вывода
//Исходный массив:
//38 27 43 3 9 82 10 

//Отсортированный массив:
//3 9 10 27 38 43 82